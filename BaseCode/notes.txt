* 配置模块导入路径
    sys.path.append('xxoo')

* 重新导入模块
    from imp import reload
    reload(xxoo)

* 模块循环导入问题
    解决方法：设计时避免

* ==与is的区别

* 深拷贝与浅拷贝
    深拷贝使用：import copy
    a = copy.deepcopy(b)

    - 注意copy.copy与copy.deepcopy的区别
    - 注意copy.copy拷贝元组时的特点

* 进制和位运算
    进制之间的转换，使用函数：bin()/int()/hex()/oct()

* 私有化
    _X: 单前置下划线，私有化属性或方法，仅本模块使用，from xxx import *时禁止导入
    __X: 双前置下划线，私有化属性或方法，避免与子类中的属性名冲突，无法在外部直接访问

* property的使用
    -property函数
    -property装饰器

* 可迭代对象和迭代器
    可以直接作用于for循环的对象称为可迭代对象
    判断可迭代对象的方法：
    from collections import Iterable
    isinstance(xxx, Iterable)

    -可以被next()函数调用并返回下一个值的对象称为迭代器：Itertor
    判断迭代器的方法：
    from collections import Iterator
    isinstance(xxx, Iterator)

    -将一个可迭代对象变成迭代器使用iter()函数
    a = iter(a)

* 闭包

* VIM注释多行方法
    末行模式： %s/^/#/g 每行开头加上#号
               %s/#//g  将每行的#号替换为空
               1,,10s///g  指定行

* 装饰器

* 作用域
    globals()函数
    locals()函数
    __builtin__

* Python动态添加属性和方法
    给对象动态绑定属性和方法
    给类动态绑定属性和方法
    - 给对象动态绑定方法：
        import types
        xxxObj.xxxFunc = types.MethodType(xxxFunc, xxxObj)
    - 静态方法与类方法的添加

* 生成器

* 对象的__call__方法

* 类当装饰器
    class C(object):
        def __init__(self, func):
            self.__func = func

        def __call__(self):
            self.__func()

* 元类
    使用type('className', (parentClass,...), {'propertyName': value})创建类对象
    __metaclass__属性

* 小整数对象池
    [-5, 257] - 不包括257

* 大整数对象池

* intern机制
    a = 'aaa'
    b = 'aaa'
    a与b内存地址相同

    a = 'a a'
    b = 'a a'
    a与b内存地址不同（字符串中包含特殊字符）

* Garbage collection(GC垃圾回收)
    - 引用计数
        import gc
    - Ruby的标记清除
    - Python的隔代回收
    - 查看一个对象的引用计数
        import sys
        a = 1
        sys.getref(a)

* 内建属性
    __getattribute__

* 内建方法

* 集合

* 偏函数
    import functools

* 常用模块
    builtins
    os
    sys
    functools
    json
    logging
    multiprocessing
    threading
    copy
    time
    calender
    hashlib
    random
    re
    socket
    shutil
    glob

* 常用扩展库
    requests
    urllib
    scrapy
    beautifulsoup4
    celery
    redis
    Pillow(PIL)
    xlsxwriter
    xlwt
    xlrd
    elasticsearch
    pymysql
    pymongo
    matplotlib
    numpy/scipy
    django
    tornado
    flask
    xmltodict
    SimpleHTTPServer
    gevent
    fabric
    pandas
    scikit-learn

* PDB调试
    python -m pdb xxx.py
    l - 显示当前的代码
    n - 向下执行一行代码
    c - 继续执行代码
    b - 设置断点
    clear - 删除断点
    s - step 单步执行，可进入函数
    a - args 打印出所有的形参数据
    p - 打印变量的值
    q - quit 退出调试
    r - return 快速执行到函数的最后一行

    交互调试
    import pdb

    pdb.run('xxx(args)')
    pdb.set_trace()

* PEP8编码规范

* 多进程
    - Linux系统中使用os.fork()
    - multiprocessing模块(可跨平台)
        from multiprocessing import Process
        - 使用Process类
        - 创建Process的子类

* 进程池Pool
    from multiprocessing import Pool

* 进程间通信
   - Queue
   - 进程池中的Queue
        from multiprocessing import Manager, Pool
        q = Manager().Queue()

* 多线程
    - thread模块
    - threading模块
        - threading.Thread
        - 使用threading.Thread的子类

* 线程共享全局变量

* 可变类型和不可变类型当实参

* 互斥锁
    - 避免死锁

* 生产者消费者模型

* threading.local

* 同步与异步
    from multiprocess import Pool
    pool = Pool(3)
    pool.apply_async(func=xxx, callback=ooo)

* GIL的问题
    - 可以使用C语言来解决GIL问题
        from ctypes import *
        from threading import Thread
        lib = cdll.LoadLibrary("./libxxx.so")
        t = Thread(target=lib.xxxFunc)
        t.start()
        #lib.xxxFunc()

* socket网络编程
    import socket
    - socket是全双工
* UDP与TCP

* 编码问题

* wireshark抓包工具

* tftp下载过程分析
    - tftp协议
    - pack与unpack的使用
        import struct
        send_data = struct.pack('!H8sb5sb', 1, 'test.jpg', 0, 'octet', 0)
        a_tuple = struct.unpack('!HH', recv_data[0:4])

* UDP广播
    -如果需要发送广播数据，则需要设置允许广播
        dest = ('<broadcast>', 8888)    #广播地址
        setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    - 只有UDP可以广播，TCP不可以广播

* TCP通信
    - packet tracer工具

* 交换机和集线器的区别
    - 集线器都是广播
    - 交换机可以记录通信地址

* arp和icmp协议
    - icmp ping的时候使用
    - arp 获取电脑的MAC地址
    - rarp 根据mac找ip

* 命令 arp -a 查看ARP缓存列表

* 路由器
    - 确定一条路径的设备
    - 路由器有多个网卡，可以连接多个不同网段

* ping的过程
    - mac地址在两个设备之间通信时在变化，而IP地址在整个通信过程中保持不变
    - ip标记逻辑上的地址，mac标记实际转发时的设备地址，netmask和ip地址一起来确定网络号
      默认网关发送的ip不在同一个网段内，那么会把这个数据转发给默认网关

* TCP十种状态
    LISTEN
    SYN_SENT
    SYN_RECV
    ESTABLISHED
    FIN_WAIT1
    CLOSE_WAIT
    FIN_WAIT2
    LASK_ACK
    TIME_WAIT
    CLOSED

* TTL
    - 经过路由器的个数

* 2MSL问题
    - 一个数据包在网络上的存活时间

* listen的队列长度

* 常见的网络攻击
    - TCP半链接攻击
    - dns攻击
    - arp攻击

* nslookup baidu.com

* cdn 内容分发

* python使用原始套接字

* NAT
    - 网络地址转换

* 调制解调器（猫）
    - 把电信号转换成网络信号

* WAN和LAN

* TCP服务器
    - 单进程服务器
    - 多线程服务器
    - 多进程服务器
    - 单进程非堵塞服务器

* cow写时拷贝

* select服务器
    - select是跨平台的
    - 轮询方式进行检测

* poll服务器
    - 解决了select最多监听1024个套接字的上限问题
    - 轮询方式进行检测

* epoll服务器
    - 采用事件通知机制

* 协程
    - 又称微线程
    - 通过yield关键字实现
    - 协程实现多任务需要手动切换

* 计算密集型和IO密集型
    - 计算密集型需要占用大量的CPU资源
    - IO密集型需要网络功能，大量时间都在等待网络数据的到来

* greenlet实现多任务
    - 需要手动切换

* gevent实现多任务
    - 遇到IO操作自动切换，可自动识别IO操作

* 网络层级关系
    - 四层模型
        应用层 --> 解决要传递什么数据
        传输层 --> 解决如何传输数据
        网络层 --> 可以理解为地理位置
        链路层 --> 具体的传输工具

* HTTP协议
    - HTTP报文分析
        HTTP请求方式：
        GET    获取数据
        POST    增加数据
        PUT    修改数据
        DELETE    删除数据
        OPTION    询问服务器的某种支持特性
        HEAD    返回报文头
    - URL
        L=Location 位置
    - URN
        N=Name 名字

* HTTP无状态

* 文件打开模式
    - 文本与二进制的区别
    - 文本模式写文件时，windows会自动将\n替换成\r\n

* 静态web服务器面向对象编程抽象

* 动态网站Web服务器与WSGI协议引入
    - WSGI
        模块入口函数:
            def application(env, start_response):
                env = {
                    'xx': oo,
                }
                start_response(status_code, [('xx':oo),])
                return body

            env为字典格式
            body返回响应体


        服务端定义方法：
            def start_response(self, status, headers):
                pass

* WSGI应用程序中status与headers定义位置的说明

* 新式类和旧式类
    - python3中全是新式类
    - 类属性__dict__可以查看类和对象的方法和属性

* Pycharm的使用方法
    - PEP8代码风格
    - Debug技巧

* 对象获取属性的顺序
    __getattribute__() -> __dict__字典 -> __getattr__()

* 正则表达式
    - re模块
        re.match(pattern, str)    #从左到右去匹配，成功返回匹配对象，否则返回None
        匹配对象Match Object具有group方法, 用来返回字符串的匹配部分
    . 匹配任意1一个字符(除了\n)
    [] 匹配[]中列举的字符
    [^] 匹配[]中列举之外的字符
    \d 匹配数字，即0-9
    \D 匹配非数字，即不是数字
    \s 匹配空白，即空格，tab键
    \S 匹配非空白
    \w 匹配单词字符，即a-z、A-Z、0-9、_
    \W 匹配非单词字符
    * 匹配前一个字符出现0次或者无限次，即可有可无
    + 匹配前一个字符出现1次或者无限次，即至少有1次
    ? 匹配前一个字符出现1次或在0次，即要么1次，要么没有
    {m} 匹配前一个字符出现m次
    {m,} 匹配前一个字符至少出现m次
    {m,n} 匹配前一个字符出现从m到n次

    ^ 匹配字符串开头
    $ 匹配字符串结尾
    \b 匹配一个单词的边界
    \B 匹配非单词边界

    | 匹配左右任意一个表达式
    (ab) 将括号中字符作为一个分组
    \num 引用分组num匹配到字符串
    (?p<name>) 分组起别名
    (?P=name) 引用别名为name分组匹配到的字符串

* timeit模块

* 数据结构和算法
    - 内存存储数据的本质
    - 顺序表和链表
    - 顺序存储的基本操作
        增加、删除
    - 栈
    - 队列
    - 链表
        - 单向链表

* 爬虫
    - 就是抓取网页数据的程序
    - 网页三大特征
        1. 每个网页都有自己的URL（统一资源定位符）来进行定位
        2. 网页都使用HTML（超文本标记语言）来描述页面信息
        3. 网页都使用HTTP/HTTPS（超文本传输协议）协议来传输HTML数据

    - 爬虫设计思路
        1. 首先确定需要爬取的网页URL地址
        2. 通过HTTP/HTTP协议来获取对应的HTML页面
        3. 提取HTML页面里有用的数据
            a. 如果是需要的数据，就保存起来
            b. 如果是页面里的其他URL，那就继续执行第二步

    - 相关模块:
        抓取HTML: urllib、urllib2、requests
        解析: re、xpath、BeautifulSoup4(bs4)、jsonpath、pyquery
    - 采集动态HTML以及验证码处理
        通用的动态页面采集: Selenium + PhantomJS（无界面浏览器）:模拟真实浏览器加载数据
        Tesseract: 机器学习库，机器图像识别系统，可以处理简单的验证码，复杂的验证码可以通过手动输入或打码平台
    - Scrapy框架：
        - Scrapy 和 Pyspider
    - 分布式策略
        - scrapy-redis：在Scrapy的基础上添加了以Redis数据库为核心的一套组件，
                        让Scrapy框架支持分布式的功能
    - 爬虫、反爬虫、反反爬虫

* 通用爬虫
    - 搜索引擎用的爬虫系统

* 聚焦爬虫
    - 爬虫程序员写的针对某种内容的爬虫

* Robots协议
    - Robots.txt
    - 协议会指明通用爬虫可以爬取网页的权限

* 搜索引擎排名
    - PageRank值

* Fiddler工具
    - telerik fiddler web debugger

* 世界上第一个浏览器: Mosaic - 美国国家计算机应用中心

* Netscope: 网景 - 支持框架

* Microsoft 微软: internet Explorer

* Mozilla 基金组织: FireFox火狐 - Gecko内核

* User-Agent

* uellib和urllib2模块
    - python3中为urllib.request

* Ajax加载方式的数据获取
    - Ajax方式加载的页面，数据格式一定是json，拿到json就是拿到了数据

* 利用cookie模拟登录

* CA证书







* Tornado框架
    - 轻量级web框架
    - 有出色抗负载能力的Web服务器



