* 基础篇
    1. 电脑简史
    2. 计算机结构
    3. 操作系统历史
    4. 二进制运算
    5. 字符编码与计算机容量
    6. 编程语言介绍
    7. 开发语言分类
    8. 演讲能力的锻炼
    9. Python历史、32bit和64bit系统的区别、系统运行机制浅析
    10. Python版本的选择
    11. 文件后缀及系统环境变量介绍
    12. Python程序文件执行和与其他编程语言的简单对比
    13. 变量详解及变量的重新赋值
    14. 编码部分历史及文件编码简介
    15. 注释及简单的用户输入输出
    16. if语句及多分支
    17. 缩进介绍
    18. 算术运算符
    19. 赋值运算符
    20. 判断三个数字中的最大值
    21. 逻辑运算符、表达式
    22. 短路原则
    23. while循环
    24. IDE介绍及设置
    25. 字符串格式化
    26. 数据类型-数值、布尔值、字符串简介
    27. for循环、break语句
    28. continue语句
    29. 标志位
    30. 列表讲解、切片、内置方法
    31. 元组
    32. 字典及字典操作
    33. 字符串
    34. Python编码解码
    35. 文件操作基本流程、具体方法
    36. 文件操作之flush及遍历文件最优法
    37. 文件操作之修改磁盘文件
    38. 文件操作之with方法
    39. ubuntu的安装
    40. 解决忘记密码的问题
    41. 配置分辨率
    42. 安装vmware tools
    43. 目录结构、分区简介、语言环境、软件安装
    44. date、logout、reboot、shutdown
    45. cd、pwd、mkdir、帮助、touch、ls内容简介、目录操作
    46. wc、sort、uniq、cut、tee、history命令
    47. more、less、head、tail、ls、用户权限
    48. 用户管理、su、sudo、alias
    49. 用户配置文件、环境变量、重定向
    50. locate、find、挂载卸载
    51. cron、tar、grep、简单正则
    52. sed、awk
    53. vi和vim
    54. 深拷贝与浅拷贝
    55. 集合
    56. 函数的特性
    57. 函数的参数
    58. 函数的return
    59. 函数的作用域
    60. 高阶函数和递归函数
    61. 内置函数
    62. 闭包
    63. 装饰器
    64. 装饰器之被装饰函数的参数
    65. 装饰器之装饰函数的参数
    66. 装饰器应用之登录
    67. 列表生成式及生成器
    68. 生成器
    69. 通过生成器yield实现伪并发
    70. 迭代器
    71. time模块
    72. random模块
    73. os模块
    74. sys模块
    75. hashlib模块
    76. logging模块
    77. configparser模块
    78. re模块
    79. 计算器思路
    78. 模块的概念
    79. 重要的BASEDIR
    80. __name__变量
    81. 目录结构
    82. json和pickle模块
    83. dump和load方法
    84. shelve模块
    85. ATM小例子
    86. XML模块
    87. 面向对象知识
    88. 定义类和创建对象
    89. self参数
    90. 三大特性之继承和构造方法
    91. 三大特性之继承之多继承
    92. socketserver源码执行流程
    93. 三大特性之多态
    94. 类的成员之字段
    95. 类的成员之方法
    96. 类的成员之属性
    97. 成员修饰符
    98. 类的特殊成员
    99. 异常处理
    100. 反射
    101. 单例模式
    102. 网络通信三要素
    103. socket初识
    104. 远程执行命令
    105. 粘包现象及解决办法
    106. 文件上传
    107. socketserver模块
    108. 线程及进程
    109. join方法
    110. Python的GIL
    111. 线程与进程的区别
    112. 守护线程
    113. 信号量
    114. 条件变量同步
    115. 同步条件event
    116. 队列queue
    117. FTP小例子
    118. Python2和Python3编码
    119. 创建进程的两种方式
    120. 进程通信和数据共享
    121. yield支持下的协程
    122. gevent下的协程
    123. 互联网协议
    124. 物理层和数据链路层
    125. 网络层
    126. arp协议及路由概念
    127. 传输层
    128. tcp协议
    129. dhcp协议获取ip信息
    130. 应用层
    131. dns协议
    132. 上网流程介绍及子网划分
    133. 事件驱动模型
    134. 四种IO模型
    135. select、poll、epoll
    136. 模型代码设计
    137. Mysql数据库
    138. Navicat工具
    139. 工作中开发者和DBA的职责
    140. pip
    141. pymysql模块

* 前端篇
    1. html
    2. http协议
    3. css
    4. javascript
    5. DOM
    6. jquery
    7. Ajax

* Web框架篇
    1. 框架的本质
    2. 基于wsgi的web框架开发
    3. MTV和MVC模式
    4. Django
    5. django流程之url和视图函数
    6. django流程之模版
    7. django流程之model以及实例
    8. django流程之配置文件
    9. django重点之url无命名分
    10. django重点之url命名分组，参数以及别名
    11. django重点之url关于别名补充
    12. django重点之url映射分发
    13. django重点之视图函数
    14. redirect的重定向
    15. django模板之Template和Context
    16. django模板之filter
    17. django模板之大括号和百分号的故事
    18. django模板之继承
    19. django之ORM
    20. 多对多自建第三张表和queryset的惰性机制
    21. ORM查询之基于对象的正向查询与反向查询
    22. ORM查询之基于___的条件查询
    23. 聚合查询与分组查询
    24. F查询与Q查询
    25. admin简介
    26. 基于mysql的数据库连接
    27. 用户管理
    28. cookie
    29. django之form
    30. django之分页
    31. Form表单上传文件
    32. 基于FormData实现文件上传（XMLHttpRequest和jQuery）
    33. JSONP
    34. 基于iframe和form表单伪造ajax并实现文件上传


******************************************知识点*****************************************
1. 迭代器
    - 一个实现了迭代器协议的容器对象

    它基于一下两个方法：
    __next__ : 返回容器的下一个元素
    __iter__ : 返回迭代器本身

    迭代器可以利用内置的iter函数和一个序列来创建


2. 类装饰器
    通用模式：

    class DecoratorAsClass:
        def __init__(self, function):
            self.function = function

        def __call__(self, *args, **kwargs):
            # 调用之前做点什么
            result = self.function(*args, **kwargs)
            # 调用之后做点什么

            # 返回结果
            return result


3. 上下文管理器协议
    该协议包含两个特殊方法：
    __enter__(self)
    __exit__(self, exc_type, exc_value, traceback)

    执行with语句的过程如下:
    调用__enter__方法，任何返回值都会绑定到指定的as子句
    执行内部代码块
    调用__exit__方法


4. 函数注解
