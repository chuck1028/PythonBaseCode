************************************************
Beautiful is better than ugly.(美丽优于丑陋)
Explicit is better than implicit.（清楚优于含糊)
Simple is better than complex.（简单优于复杂)
Complex is better than complicated.（复杂优于繁琐)
Readability counts.(重要的是可读性)
************************************************

一、安装requests
    pip install requests

二、发送请求与传递参数
------------Example----------
import requests

r = requests.get(url='http://www.itwhy.org')    #最基本的GET请求
print(r.status_code)    #获取返回状态
r = requests.get(url='http://dict.baidu.com/s', params={'wd':'python'})    #带参数的GET请求
print(r.url)
print(r.text)    #打印解码后的返回数据

-------------其他请求方法----------
requests.get('https://github.com/timeline.json')    #GET请求
requests.post('http://httpbin.org/post')    #POST请求
requests.put('http://httpbin.org/put')    #PUT请求
requests.delete('http://httpbin/delete')    #DELETE请求
requests.head('http://httpbin.org/get')    #HEAD请求
requests.options('http://httpbin.org/get')    #OPTIONS请求

------------POST发送JSON数据---------
import requests
import json

r = requests.post('http://api.github.com/some/endpoint', data=json.dumps({'some':'data'}))
print(r.json())

------------定制header------------------
import requests
import json

data = {'some':'data'}
headers = {'content-type':'application/json',
           'User-Agent':'Mozilla/5.0(X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0'}
r = requests.post('https://api.github.com/some/endpoint', data=data, header=headers)
print(r.text)

三、Response对象
使用requests方法后,会返回一个response对象,其存储了服务器响应的内容
获取文本方式的响应实例：当你访问r.text之时，会使用其响应的文本编码进行解码，并且你可以修改其编码让r.text使用自定义的编码进行解码
r = requests.get('http://www.itwhy.org')
print(r.text, '\n{}\n'.format('*'*79), r.encoding)
r.encoding = 'GBK'
print(r.text, '\n{}\n'.format('*'*79), r.encoding)

------------其他响应--------------------
r.status_code    #响应状态码
r.raw    #返回原始响应体，也就是urllib的response对象，使用r.raw.read()读取
r.content    #字节方式的响应体，会自动为你解码gzip和deflate压缩
r.text    #字符串方式的响应体，会自动根据响应头部的字符编码进行解码
r.headers    #以字典对象存储服务器响应头，但是这个字典比较特殊，字典健不区分大小
特殊方法：
r.json()    #requests中内置的JSON解码器
r.raise_for_status()    #失败请求（非200响应）抛出异常
案例之一：
import requests
URL = 'http://ip.taobao.com/service/getIpInfo.php'    #淘宝IP地址库API
try:
    r = requests.get(URL, params={'ip':'8.8.8.8'}, timeout=1)
    r.raise_for_status()    #如果响应状态不是200，就主动抛出异常
except requests.RequestException as e:
    print(e)
else:
    result = r.json()
    print(type(result), result, sep='\n')

四、上传文件
使用requests模块，上传文件也是如此简单，文件类型会自动进行处理
import requests

url = 'http://127.0.0.1:5000/upload'
files = {'file':open(''/home/1.txt', 'rb')}

r = requests.post(url, files=files)
print(r.text)

更加方便的是，你可以把字符串当着文件进行上传：
import requests

url = 'http://127.0.0.1:5000/upload'
files = {'file':('test.txt', b'Hello Requests.')}    #必须显示的设置文件名
r = requests.post(url, files=files)
print(r.text)

五、身份验证
基本身份认证（HTTP Basic Auth):
import requests
from requests.auth import HTTPBasicAuth

r = requests.get('https://httpbin.org/hidden-basic-auth/user/passwd', auth=HTTPBasicAuth('user', 'passwd'))
#r = requests.get('https://httpbin.org/hidden-basic-auth/user/passwd', auth=('user', 'passwd'))    #简写
print(r.json())

另一种非常流行的HTTP身份认证形式是摘要式身份认证，Requests对它的支持也是开箱即可用
requests.get(URL,auth=HTTPDigestAuth('user', 'pass'))

六、Cookies与会话对象
如果某个响应中包含一些Cookies,你可以快速访问他们
import requests

r = requests.get('http://www.google.com.hk/')
print(r.cookies['NID'])
print(tuple(r.cookies))

要想发送你的cookies到服务器，可以使用cookies参数
import requests

url = 'http://httpbin.org/cookies'
cookies = {'testCookies_1':'Hello_Python3', 'testCookies_2': 'Hello_Requests'}
r = requests.get(url, cookies=cookies)
print(r.json())

会话对象让你能够跨请求保持某些参数，最方便的是在同一个Session实例发出的所有请求之间保持cookies，且这些都是自动处理的，实例如下：
import requests

headers = {'Accept':'text/html, application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
          'Accept-Encoding':'gzip,deflate,compress',
          'Accept-Language':'en-us;q=0.5,en;q=0.3',
          'Cache-Control':'max-age=0',
          'Connection':'Keep-alive',
          'User-Agent':'Mozilla/5.0(X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0'}
s = requests.Session()
s.headers.update(headers)
#s.auth = ('superuser', '123')
s.get('https://www.kuaipan.cn/account_login.html')

_URL = 'http://www.kuaipan.cn/index.php'
s.post(_URL, params={'ac':'account', 'op':'login'},
       data={'username':'xxxx', 'userpwd':'oooo', 'isajax':'yes'})
r = s.get(_URL, params={'ac':'zone', 'op':'taskdetail'})
print(r.json())
s.get(_URL, params={'ac':'common', 'op':'usersign'})

七、超时与异常
timeout仅对连接过程有效，与响应体的下载无关
所有Requests显示抛出的异常都继承自requests.exceptions.RequestException: ConnectionError HTTPError Timeout TooManyRedirects


=====笔记====
内容：
1. 总体介绍
2. HTTP基本原理
3. 发送请求[Request]
4. 接收响应[Response]
5. 进阶话题

gunicorn httpbin:app






