* DRY: Don't repeat yourself!

* wsgiref 模块

* Django命令
    - django-admin.py startproject project_name  #新建工程
    - python manage.py startapp app_name  #创建APP
    - 数据库相关命令
        -
          # 1. 创建更改的文件
          python manage.py makemigrations
          # 2. 将生成的py文件应用到数据库
          python manage.py migrate
          # 3. 清空数据库, 此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表
          python manage.py flush
          # 4. 导出数据 导入数据
          python manage.py dumpdata appname > appname.json
          python manage.py loaddata appname.json
          # 5. 数据库命令行
          python manage.py dbshell
    - 运行开发服务器
        - python manage.py runserver host:port
    - 创建超级管理员
        - python manage.py createsuperuser # 按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填
        -
        # 修改 用户密码可以用：
        python manage.py changepassword username
    - Django 项目环境终端
        - python manage.py shell
    - 更多命令
        - 终端上输入 python manage.py 可以看到详细的列表，在忘记子名称的时候特别有用

* MTV和MVC模式

* 配置app到settings，方便在数据库建立表

* Django路由系统
    - 正则匹配
        - 完整匹配
        - 正则分组
        - 正则命名
    - url别名
    - 路由分发

* Django视图函数

* 模板
    - 模板的渲染
    - 模板继承

* request对象的所有属性
    - request.user  #获取当前用户
    - request.path  #获取当前网址
    - request.GET.urlencode  #获取当前 GET 参数
    ...

* 返回response对象的所有方法
    - locals()方法将本地所有变量及其值打包成字典

* redirect重定向

* 小示例：轮播图

* 模型相关
    - 新建一个对象的方法有以下几种
      Person.objects.create(name=name,age=age)

      p = Person(name="WZ", age=23)

      p.save()

      p = Person(name="TWZ")

      p.age = 23

      p.save()

      Person.objects.get_or_create(name="WZT", age=23)

      这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为Person对象，第二个为True或False,
      新建时返回的是True, 已经存在时返回False.

    - 获取对象有以下方法
      Person.objects.all()

      Person.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存

      Person.objects.get(name=name)



      get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter

      Person.objects.filter(name="abc")  # 等于Person.objects.filter(name__exact="abc") 名称严格等于 "abc" 的人

      Person.objects.filter(name__iexact="abc")  # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件



      Person.objects.filter(name__contains="abc")  # 名称中包含 "abc"的人

      Person.objects.filter(name__icontains="abc")  #名称中包含 "abc"，且abc不区分大小写



      Person.objects.filter(name__regex="^abc")  # 正则表达式查询

      Person.objects.filter(name__iregex="^abc")  # 正则表达式不区分大小写



      filter是找出满足条件的，当然也有排除符合某条件的

      Person.objects.exclude(name__contains="WZ")  # 排除包含 WZ 的Person对象

      Person.objects.filter(name__contains="abc").exclude(age=23)  # 找出名称含有abc, 但是排除年龄是23岁的

    - 删除符合条件的结果
      Person.objects.filter(name__contains="abc").delete() # 删除 名称中包含 "abc"的人

      如果写成
      people = Person.objects.filter(name__contains="abc")
      people.delete()
      效果也是一样的，Django实际只执行一条 SQL 语句。

    - 更新某个内容
     批量更新：
    Person.objects.filter(name__contains="abc").update(name='xxx') # 名称中包含 "abc"的人 都改成 xxx
    Person.objects.all().delete() # 删除所有 Person 记录

    单个 object 更新：
    twz = Author.objects.get(name="WeizhongTu")
    twz.name="WeizhongTu"
    twz.email="tuweizhong@163.com"
    twz.save()  # 最后不要忘了保存！！！

    - QuerySet 是可迭代的
    es = Entry.objects.all()
    for e in es:
        print(e.headline)
    注意事项：

    (1). 如果只是检查 Entry 中是否有对象，应该用 Entry.objects.all().exists()

    (2). QuerySet 支持切片 Entry.objects.all()[:10] 取出10条，可以节省内存

    (3). 用 len(es) 可以得到Entry的数量，但是推荐用 Entry.objects.count()来查询数量，后者用的是SQL：SELECT COUNT(*)

    (4). list(es) 可以强行将 QuerySet 变成 列表

    -  QuerySet 是可以用pickle序列化到硬盘再读取出来的
    >>> import pickle
    >>> query = pickle.loads(s)     # Assuming 's' is the pickled string.
    >>> qs = MyModel.objects.all()
    >>> qs.query = query            # Restore the original 'query'.

    - QuerySet 查询结果排序
    Author.objects.all().order_by('name')
    Author.objects.all().order_by('-name') # 在 column name 前加一个负号，可以实现倒序

    - QuerySet 支持链式查询
    Author.objects.filter(name__contains="WeizhongTu").filter(email="tuweizhong@163.com")
    Author.objects.filter(name__contains="Wei").exclude(email="tuweizhong@163.com")

    # 找出名称含有abc, 但是排除年龄是23岁的
    Person.objects.filter(name__contains="abc").exclude(age=23)

    - QuerySet 不支持负索引
    Person.objects.all()[:10] 切片操作，前10条
    Person.objects.all()[-10:] 会报错！！！

    # 1. 使用 reverse() 解决
    Person.objects.all().reverse()[:2] # 最后两条
    Person.objects.all().reverse()[0] # 最后一条

    # 2. 使用 order_by，在栏目名（column name）前加一个负号
    Author.objects.order_by('-id')[:20] # id最大的20条

    - QuerySet 重复的问题，使用 .distinct() 去重
    一般的情况下，QuerySet 中不会出来重复的，重复是很罕见的，但是当跨越多张表进行检索后，结果并到一起，可以会出来重复的值（我最近就遇到过这样的问题）
    qs1 = Pathway.objects.filter(label__name='x')
    qs2 = Pathway.objects.filter(reaction__name='A + B >> C')
    qs3 = Pathway.objects.filter(inputer__name='WeizhongTu')

    # 合并到一起
    qs = qs1 | qs2 | qs3
    这个时候就有可能出现重复的

    # 去重方法
    qs = qs.distinct()
